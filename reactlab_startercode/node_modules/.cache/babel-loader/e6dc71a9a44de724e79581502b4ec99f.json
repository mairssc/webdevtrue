{"ast":null,"code":"var _jsxFileName = \"/Users/abhiwadekar/Desktop/UCB/sp21/breakout/ry/rykerblog/src/Home.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport BlogList from './BlogList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Home() {\n  _s();\n\n  const [blogs, setBlogs] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null); // [ \n  //     {title: 'My New Website', body: 'lorem ipsum', author: 'ry', id: 1},\n  //     {title: 'what\\'s up', body: 'hi', author: 'ry', id: 2},\n  // ]);\n\n  const handleDelete = id => {\n    const newBlog = blogs.filter(blog => blog.id !== id);\n    setBlogs(newBlog);\n  }; // USEEFFECT LESSON\n  // useful to fetch data\n  //empty useEffect() runs at every render\n\n\n  useEffect(() => {\n    console.log('use effect ran');\n    console.log(blogs);\n  }); //DONT set state here!\n  //useeffect with dependencies\n  //this one is basically componentdidmount or when the component renders for the first time\n  // useEffect(() => {\n  //     console.log('use effect ran again');\n  //     console.log(blogs)\n  // }, []); \n\n  useEffect(() => {\n    //can't use async inside this but can externalize the async method if you want\n    // fetch('http://localhost:8000/blogs')\n    //     .then(response => {\n    //         return response.json()\n    //     })\n    //     .then(data => {\n    //         //we finally have the data smh\n    //         console.log(data);\n    //         setBlogs(data); //will this cause an infinite loop?\n    //         setIsPending(false);\n    //     })\n    setTimeout(() => {\n      // fetch('http://localhost:8000/blogss')\n      fetch('http://localhost:8000/blogs').then(response => {\n        // console.log(response);\n        if (!response.ok) {\n          throw Error('could not fetch data for that resource');\n        }\n\n        return response.json();\n      }).then(data => {\n        //we finally have the data smh\n        console.log(data);\n        setBlogs(data); //will this cause an infinite loop?\n\n        setIsPending(false);\n      }).catch(err => {\n        // console.log(err.message);\n        setError(err.message);\n      });\n    }, 1000);\n  }, []);\n  const [name, setName] = useState('mario'); //state variable\n\n  useEffect(() => {\n    console.log('use effect ran 3');\n    console.log(name);\n  }, [name]); // const handleClick\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home\",\n    children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 24\n    }, this), isPending && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 27\n    }, this), blogs && /*#__PURE__*/_jsxDEV(BlogList, {\n      blogs: blogs,\n      title: \"\",\n      handleDelete: handleDelete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setName(name === 'luigi' ? 'mario' : 'luigi'),\n      children: \"change name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Home, \"eOv4MWGVTcEh8GeH48qPVppoRf4=\");\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/abhiwadekar/Desktop/UCB/sp21/breakout/ry/rykerblog/src/Home.js"],"names":["useState","useEffect","BlogList","Home","blogs","setBlogs","isPending","setIsPending","error","setError","handleDelete","id","newBlog","filter","blog","console","log","setTimeout","fetch","then","response","ok","Error","json","data","catch","err","message","name","setName"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,eAAe,SAASC,IAAT,GAAgB;AAAA;;AAE3B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,IAAD,CAAlC;AAEA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,IAAD,CAA1C;AAEA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC,CAN2B,CAO3B;AACA;AACA;AACA;;AAEA,QAAMU,YAAY,GAAIC,EAAD,IAAQ;AACzB,UAAMC,OAAO,GAAGR,KAAK,CAACS,MAAN,CAAcC,IAAD,IAAUA,IAAI,CAACH,EAAL,KAAYA,EAAnC,CAAhB;AACAN,IAAAA,QAAQ,CAACO,OAAD,CAAR;AACH,GAHD,CAZ2B,CAiB/B;AACA;AAEI;;;AACAX,EAAAA,SAAS,CAAC,MAAM;AACZc,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYZ,KAAZ;AACH,GAHQ,CAAT,CArB2B,CA0B3B;AAEA;AACA;AACA;AACA;AACA;AACA;;AACAH,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAgB,IAAAA,UAAU,CAAC,MAAM;AACb;AACAC,MAAAA,KAAK,CAAC,6BAAD,CAAL,CACKC,IADL,CACUC,QAAQ,IAAI;AACd;AACA,YAAG,CAACA,QAAQ,CAACC,EAAb,EAAiB;AACb,gBAAMC,KAAK,CAAC,wCAAD,CAAX;AACH;;AACD,eAAOF,QAAQ,CAACG,IAAT,EAAP;AACH,OAPL,EAQKJ,IARL,CAQUK,IAAI,IAAI;AACV;AACAT,QAAAA,OAAO,CAACC,GAAR,CAAYQ,IAAZ;AACAnB,QAAAA,QAAQ,CAACmB,IAAD,CAAR,CAHU,CAGM;;AAChBjB,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,OAbL,EAcKkB,KAdL,CAcWC,GAAG,IAAI;AACV;AAEAjB,QAAAA,QAAQ,CAACiB,GAAG,CAACC,OAAL,CAAR;AACH,OAlBL;AAmBH,KArBS,EAqBP,IArBO,CAAV;AAsBH,GAlCQ,EAkCN,EAlCM,CAAT;AAoCA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkB7B,QAAQ,CAAC,OAAD,CAAhC,CAtE2B,CAuE3B;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZc,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYY,IAAZ;AACH,GAHQ,EAGP,CAACA,IAAD,CAHO,CAAT,CAxE2B,CA4E3B;;AACA,sBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,eAUMpB,KAAK,iBAAI;AAAA,gBAAMA;AAAN;AAAA;AAAA;AAAA;AAAA,YAVf,EAWKF,SAAS,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAXlB,EAaKF,KAAK,iBAAI,QAAC,QAAD;AAAU,MAAA,KAAK,EAAEA,KAAjB;AAAwB,MAAA,KAAK,EAAC,EAA9B;AAAiC,MAAA,YAAY,EAAGM;AAAhD;AAAA;AAAA;AAAA;AAAA,YAbd,eAcI;AAAQ,MAAA,OAAO,EAAE,MAAMmB,OAAO,CAACD,IAAI,KAAG,OAAP,GAAe,OAAf,GAAuB,OAAxB,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAdJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAkBH;;GA/FuBzB,I;;KAAAA,I","sourcesContent":["import { useState, useEffect } from 'react';\nimport BlogList from './BlogList';\n\nexport default function Home() {\n\n    const [blogs, setBlogs] = useState(null);\n\n    const [isPending, setIsPending] = useState(true);\n\n    const [error, setError] = useState(null)\n    // [ \n    //     {title: 'My New Website', body: 'lorem ipsum', author: 'ry', id: 1},\n    //     {title: 'what\\'s up', body: 'hi', author: 'ry', id: 2},\n    // ]);\n\n    const handleDelete = (id) => {\n        const newBlog = blogs.filter((blog) => blog.id !== id);\n        setBlogs(newBlog);\n    }  \n\n// USEEFFECT LESSON\n// useful to fetch data\n\n    //empty useEffect() runs at every render\n    useEffect(() => {\n        console.log('use effect ran');\n        console.log(blogs)\n    }); \n\n    //DONT set state here!\n\n    //useeffect with dependencies\n    //this one is basically componentdidmount or when the component renders for the first time\n    // useEffect(() => {\n    //     console.log('use effect ran again');\n    //     console.log(blogs)\n    // }, []); \n    useEffect(() => {\n        //can't use async inside this but can externalize the async method if you want\n        // fetch('http://localhost:8000/blogs')\n        //     .then(response => {\n        //         return response.json()\n        //     })\n        //     .then(data => {\n        //         //we finally have the data smh\n        //         console.log(data);\n        //         setBlogs(data); //will this cause an infinite loop?\n        //         setIsPending(false);\n        //     })\n        setTimeout(() => {\n            // fetch('http://localhost:8000/blogss')\n            fetch('http://localhost:8000/blogs')\n                .then(response => {\n                    // console.log(response);\n                    if(!response.ok) {\n                        throw Error('could not fetch data for that resource')\n                    }\n                    return response.json();\n                })\n                .then(data => {\n                    //we finally have the data smh\n                    console.log(data);\n                    setBlogs(data); //will this cause an infinite loop?\n                    setIsPending(false);\n                })\n                .catch(err => {\n                    // console.log(err.message);\n                    \n                    setError(err.message);\n                });\n        }, 1000)\n    }, []); \n\n    const [name, setName] = useState('mario')\n    //state variable\n    useEffect(() => {\n        console.log('use effect ran 3');\n        console.log(name);\n    },[name])\n    // const handleClick\n    return(\n        <div className=\"home\">\n            {/* <h2>Homepage</h2>\n            {blogs.map((blog) => (\n                <div className=\"blog-preview\">\n                    <h2>{blog.title}</h2>\n                    <p>Written by {blog.author}</p>\n                </div>\n            ))} */}\n            {/* <BlogList />  we need props! */}\n            {/* <BlogList blogs={blogs.filter( (blogs) => blogs.id !== 2 )} title=\"!!\" /> */}\n            { error && <div>{error}</div>}\n            {isPending && <div>loading...</div>}\n            {/* <BlogList blogs={blogs} title=\"\" handleDelete ={handleDelete}/>  why does this error? */}\n            {blogs && <BlogList blogs={blogs} title=\"\" handleDelete ={handleDelete}/>}\n            <button onClick={() => setName(name==='luigi'?'mario':'luigi')}>change name</button>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}