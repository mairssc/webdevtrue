{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\n\nconst useFetch = url => {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const abortCont = new AbortController(); //can't use async inside this but can externalize the async method if you want\n    // fetch('http://localhost:8000/blogs')\n    //     .then(response => {\n    //         return response.json()\n    //     })\n    //     .then(data => {\n    //         //we finally have the data smh\n    //         console.log(data);\n    //         setBlogs(data); //will this cause an infinite loop?\n    //         setIsPending(false);\n    //     })\n\n    setTimeout(() => {\n      // fetch('http://localhost:8000/blogss')\n      fetch(url, {\n        signal: abortCont.signal\n      }).then(response => {\n        // console.log(response);\n        if (!response.ok) {\n          throw Error('could not fetch data for that resource');\n        }\n\n        return response.json();\n      }).then(data => {\n        //we finally have the data smh\n        console.log(data);\n        setData(data); //will this cause an infinite loop?\n\n        setIsPending(false);\n      }).catch(err => {\n        // console.log(err.message);\n        if (err.name === 'AbortError') {\n          console.log(\"fetch aborted\");\n        } else {\n          setIsPending(false);\n          setError(err.message);\n        }\n      });\n    }, 1000);\n    return () => abortCont.abort();\n  }, []);\n  return {\n    data,\n    isPending,\n    error\n  };\n};\n\n_s(useFetch, \"VxPkICXS4AfkXU1R8tuEJAA8e58=\");\n\nexport default useFetch;","map":{"version":3,"sources":["/Users/abhiwadekar/Desktop/UCB/sp21/breakout/ry/rykerblog/src/useFetch.js"],"names":["useState","useEffect","useFetch","url","data","setData","isPending","setIsPending","error","setError","abortCont","AbortController","setTimeout","fetch","signal","then","response","ok","Error","json","console","log","catch","err","name","message","abort"],"mappings":";;AACA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;;AAEA,MAAMC,QAAQ,GAAIC,GAAD,IAAS;AAAA;;AAGtB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,IAAD,CAAhC;AAEA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,IAAD,CAA1C;AAEA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMS,SAAS,GAAG,IAAIC,eAAJ,EAAlB,CADY,CAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAC,IAAAA,UAAU,CAAC,MAAM;AACb;AACAC,MAAAA,KAAK,CAACV,GAAD,EAAM;AAAEW,QAAAA,MAAM,EAAEJ,SAAS,CAACI;AAApB,OAAN,CAAL,CACKC,IADL,CACUC,QAAQ,IAAI;AACd;AACA,YAAG,CAACA,QAAQ,CAACC,EAAb,EAAiB;AACb,gBAAMC,KAAK,CAAC,wCAAD,CAAX;AACH;;AACD,eAAOF,QAAQ,CAACG,IAAT,EAAP;AACH,OAPL,EAQKJ,IARL,CAQUX,IAAI,IAAI;AACV;AACAgB,QAAAA,OAAO,CAACC,GAAR,CAAYjB,IAAZ;AACAC,QAAAA,OAAO,CAACD,IAAD,CAAP,CAHU,CAGK;;AACfG,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,OAbL,EAcKe,KAdL,CAcWC,GAAG,IAAI;AACV;AACA,YAAIA,GAAG,CAACC,IAAJ,KAAa,YAAjB,EAA+B;AAC3BJ,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACH,SAFD,MAEO;AACHd,UAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,UAAAA,QAAQ,CAACc,GAAG,CAACE,OAAL,CAAR;AACH;AACJ,OAtBL;AAuBH,KAzBS,EAyBP,IAzBO,CAAV;AA0BA,WAAO,MAAMf,SAAS,CAACgB,KAAV,EAAb;AACH,GAxCQ,EAwCN,EAxCM,CAAT;AAyCA,SAAO;AAAEtB,IAAAA,IAAF;AAAQE,IAAAA,SAAR;AAAmBE,IAAAA;AAAnB,GAAP;AACH,CAlDD;;GAAMN,Q;;AAoDN,eAAeA,QAAf","sourcesContent":["\nimport {useState, useEffect} from 'react';\n\nconst useFetch = (url) => {\n\n\n    const [data, setData] = useState(null);\n\n    const [isPending, setIsPending] = useState(true);\n\n    const [error, setError] = useState(null)\n    useEffect(() => {\n        const abortCont = new AbortController();\n        //can't use async inside this but can externalize the async method if you want\n        // fetch('http://localhost:8000/blogs')\n        //     .then(response => {\n        //         return response.json()\n        //     })\n        //     .then(data => {\n        //         //we finally have the data smh\n        //         console.log(data);\n        //         setBlogs(data); //will this cause an infinite loop?\n        //         setIsPending(false);\n        //     })\n        setTimeout(() => {\n            // fetch('http://localhost:8000/blogss')\n            fetch(url, { signal: abortCont.signal })\n                .then(response => {\n                    // console.log(response);\n                    if(!response.ok) {\n                        throw Error('could not fetch data for that resource')\n                    }\n                    return response.json();\n                })\n                .then(data => {\n                    //we finally have the data smh\n                    console.log(data);\n                    setData(data); //will this cause an infinite loop?\n                    setIsPending(false);\n                })\n                .catch(err => {\n                    // console.log(err.message);\n                    if (err.name === 'AbortError') {\n                        console.log(\"fetch aborted\");\n                    } else {\n                        setIsPending(false);\n                        setError(err.message);\n                    }\n                });\n        }, 1000)\n        return () => abortCont.abort(); \n    }, []); \n    return { data, isPending, error }\n}\n\nexport default useFetch;"]},"metadata":{},"sourceType":"module"}