{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\n\nconst useFetch = url => {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    //can't use async inside this but can externalize the async method if you want\n    // fetch('http://localhost:8000/blogs')\n    //     .then(response => {\n    //         return response.json()\n    //     })\n    //     .then(data => {\n    //         //we finally have the data smh\n    //         console.log(data);\n    //         setBlogs(data); //will this cause an infinite loop?\n    //         setIsPending(false);\n    //     })\n    setTimeout(() => {\n      // fetch('http://localhost:8000/blogss')\n      fetch(url).then(response => {\n        // console.log(response);\n        if (!response.ok) {\n          throw Error('could not fetch data for that resource');\n        }\n\n        return response.json();\n      }).then(data => {\n        //we finally have the data smh\n        console.log(data);\n        setData(data); //will this cause an infinite loop?\n\n        setIsPending(false);\n      }).catch(err => {\n        // console.log(err.message);\n        setError(err.message);\n      });\n    }, 1000);\n  }, []);\n  return {\n    data,\n    isPending,\n    error\n  };\n};\n\n_s(useFetch, \"VxPkICXS4AfkXU1R8tuEJAA8e58=\");\n\nexport default useFetch;","map":{"version":3,"sources":["/Users/abhiwadekar/Desktop/UCB/sp21/breakout/ry/rykerblog/src/useFetch.js"],"names":["useState","useEffect","useFetch","url","data","setData","isPending","setIsPending","error","setError","setTimeout","fetch","then","response","ok","Error","json","console","log","catch","err","message"],"mappings":";;AACA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;;AAEA,MAAMC,QAAQ,GAAIC,GAAD,IAAS;AAAA;;AAGtB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,IAAD,CAAhC;AAEA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,IAAD,CAA1C;AAEA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAS,IAAAA,UAAU,CAAC,MAAM;AACb;AACAC,MAAAA,KAAK,CAACR,GAAD,CAAL,CACKS,IADL,CACUC,QAAQ,IAAI;AACd;AACA,YAAG,CAACA,QAAQ,CAACC,EAAb,EAAiB;AACb,gBAAMC,KAAK,CAAC,wCAAD,CAAX;AACH;;AACD,eAAOF,QAAQ,CAACG,IAAT,EAAP;AACH,OAPL,EAQKJ,IARL,CAQUR,IAAI,IAAI;AACV;AACAa,QAAAA,OAAO,CAACC,GAAR,CAAYd,IAAZ;AACAC,QAAAA,OAAO,CAACD,IAAD,CAAP,CAHU,CAGK;;AACfG,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,OAbL,EAcKY,KAdL,CAcWC,GAAG,IAAI;AACV;AACAX,QAAAA,QAAQ,CAACW,GAAG,CAACC,OAAL,CAAR;AACH,OAjBL;AAkBH,KApBS,EAoBP,IApBO,CAAV;AAqBH,GAjCQ,EAiCN,EAjCM,CAAT;AAkCA,SAAO;AAACjB,IAAAA,IAAD;AAAOE,IAAAA,SAAP;AAAkBE,IAAAA;AAAlB,GAAP;AACH,CA3CD;;GAAMN,Q;;AA6CN,eAAeA,QAAf","sourcesContent":["\nimport {useState, useEffect} from 'react';\n\nconst useFetch = (url) => {\n\n\n    const [data, setData] = useState(null);\n\n    const [isPending, setIsPending] = useState(true);\n\n    const [error, setError] = useState(null)\n    useEffect(() => {\n        //can't use async inside this but can externalize the async method if you want\n        // fetch('http://localhost:8000/blogs')\n        //     .then(response => {\n        //         return response.json()\n        //     })\n        //     .then(data => {\n        //         //we finally have the data smh\n        //         console.log(data);\n        //         setBlogs(data); //will this cause an infinite loop?\n        //         setIsPending(false);\n        //     })\n        setTimeout(() => {\n            // fetch('http://localhost:8000/blogss')\n            fetch(url)\n                .then(response => {\n                    // console.log(response);\n                    if(!response.ok) {\n                        throw Error('could not fetch data for that resource')\n                    }\n                    return response.json();\n                })\n                .then(data => {\n                    //we finally have the data smh\n                    console.log(data);\n                    setData(data); //will this cause an infinite loop?\n                    setIsPending(false);\n                })\n                .catch(err => {\n                    // console.log(err.message);\n                    setError(err.message);\n                });\n        }, 1000)\n    }, []); \n    return {data, isPending, error}\n}\n\nexport default useFetch;"]},"metadata":{},"sourceType":"module"}